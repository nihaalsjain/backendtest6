# Full CI/CD Pipeline
name: CI/CD Pipeline

permissions:
  contents: read
  actions: read
  security-events: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint & Static Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          pip install ruff black bandit pip-audit
      - name: Ruff Check
        run: ruff check . --output-format=github
      - name: Black Check
        run: black --check --diff .
      - name: Bandit Security Scan
        run: bandit -r agents tools workflows -f json -o bandit-report.json || true
      - name: Dependency Vulnerability Audit
        run: pip-audit -f json -o pip-audit.json || true
      - name: Upload Security Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-lint-artifacts
          path: |
            bandit-report.json
            pip-audit.json

  unit-tests:
    name: Unit Tests (matrix)
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10', '3.11']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install -r requirements_rag.txt || true
          pip install pytest pytest-asyncio pytest-cov pytest-timeout
      - name: Download spaCy model
        run: python -m spacy download en_core_web_sm
      - name: Run Unit Tests
        env:
          PYTHONPATH: .
          TESTING: "1"
        run: |
          pytest tests/unit -m unit -v --cov=agents --cov=tools --cov=workflows \
            --cov-config=.coveragerc --cov-report=xml:coverage.xml --cov-report=term-missing \
            --junit-xml=junit-unit.xml --timeout=60
      - name: Upload Unit Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            junit-unit.xml
            coverage.xml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install -r requirements_rag.txt || true
          pip install pytest pytest-asyncio pytest-cov pytest-timeout
          python -m spacy download en_core_web_sm
      - name: Run Integration Tests
        env:
          PYTHONPATH: .
          TESTING: "1"
        run: |
          pytest tests/integration -m integration -v --cov=agents --cov=tools --cov=workflows \
            --cov-config=.coveragerc --cov-report=xml:coverage.xml --junit-xml=junit-integration.xml --timeout=120
      - name: Upload Integration Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration
          path: |
            junit-integration.xml
            coverage.xml

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install -r requirements_rag.txt || true
          pip install pytest pytest-asyncio pytest-timeout
          python -m spacy download en_core_web_sm
      - name: Run E2E Tests
        env:
          PYTHONPATH: .
          TESTING: "1"
        run: |
          pytest tests/e2e -m e2e -v --junit-xml=junit-e2e.xml --timeout=300
      - name: Upload E2E Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e
          path: |
            junit-e2e.xml

  coverage-aggregate:
    name: Combine Coverage & Upload
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*'
          merge-multiple: true
      - name: Combine Coverage
        run: |
          pip install coverage codecov
          ls -R
          coverage combine || true
          coverage xml -o coverage-combined.xml || true
          coverage report --fail-under=80 || true
      - name: Upload Combined Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage-combined.xml
          flags: combined
          name: combined-report
          fail_ci_if_error: false

  security:
    name: Trivy & Secret Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Trivy FS Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          format: sarif
          output: trivy-results.sarif
      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
      - name: TruffleHog Secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  docs:
    name: Docs / Markdown Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
      - name: Install doc deps
        run: pip install sphinx sphinx-rtd-theme myst-parser
      - name: Build (if docs dir exists)
        run: |
          if [ -d docs ]; then sphinx-build -b html docs docs/_build/html; fi

  status-check:
    name: Aggregate Status
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, e2e-tests, coverage-aggregate, security, docs]
    if: always()
    steps:
      - name: Evaluate Job Results
        run: |
          failed=0
          for job in lint unit-tests integration-tests e2e-tests security coverage-aggregate docs; do
            result="${{ needs[job].result }}"
            echo "Job $job => $result"
            if [ "$result" != "success" ]; then
              failed=1
            fi
          done
          if [ $failed -eq 1 ]; then
            echo "One or more required jobs failed" >&2
            exit 1
          fi
          echo "All required jobs succeeded"
